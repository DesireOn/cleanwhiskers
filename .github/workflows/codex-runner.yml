name: Codex Runner

on:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: write
  pull-requests: write

jobs:
  run:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    env:
      SLEEP_SECONDS: ${{ vars.SLEEP_SECONDS || 300 }}
      NOOP_COMMIT: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git author
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: make setup

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Codex CLI
        run: |
          set -euo pipefail
          npm install -g @openai/codex
          CODEX_BIN="$(npm bin -g)/codex"
          echo "Using codex at: $CODEX_BIN"
          "$CODEX_BIN" --version
          echo "CODEX_CMD=$CODEX_BIN" >> "$GITHUB_ENV"

      - name: Inspect PATH for codex binaries
        run: |
          set -euo pipefail
          type -a codex || true
          type -a codex-cli || true

      - name: Initialize status
        run: python scripts/status.py --init

      - name: Fetch next task
        id: fetch
        run: |
          set +e
          python scripts/task_fetcher.py --print-json > task.json
          echo "exit_code=$?" >> "$GITHUB_OUTPUT"
          set -e

      - name: No task to run
        if: steps.fetch.outputs.exit_code == '20'
        run: echo "No pending tasks"

      - name: Parse task info
        if: steps.fetch.outputs.exit_code != '20'
        run: |
          echo "TASK_ID=$(jq -r '.id' task.json)" >> "$GITHUB_ENV"
          echo "TASK_TITLE=$(jq -r '.title' task.json)" >> "$GITHUB_ENV"

      - name: Run Codex task with retries
        if: steps.fetch.outputs.exit_code != '20'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          attempt=1
          max_attempts=3
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt"
            python scripts/status.py --begin-attempt "$TASK_ID"

            set +e
            bash scripts/run_codex_task.sh "$TASK_ID" "$TASK_TITLE" "$attempt"
            status=$?
            set -e

            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [[ "$BRANCH" != codex/* ]]; then
              echo "Branch $BRANCH is not automation-managed; exiting"
              exit 0
            fi
            export BRANCH

            python -c 'import os; from scripts import pr; owner, repo = os.environ["GITHUB_REPOSITORY"].split("/"); branch = os.environ["BRANCH"]; pr_number = pr.open_or_update_pr(owner, repo, branch); open("pr.txt","w").write(str(pr_number))'
            PR=$(cat pr.txt)

            python scripts/status.py --update-last-pr "$TASK_ID" "$PR"

            sleep "$SLEEP_SECONDS"

            python -c 'import os, sys; from scripts import pr; owner, repo = os.environ["GITHUB_REPOSITORY"].split("/"); pr_number = int(open("pr.txt").read()); state = pr.is_pr_merged(owner, repo, pr_number); sys.exit(2 if state=="ignored" else (0 if state=="merged" else 1))'
            result=$?

            if [ $result -eq 2 ]; then
              echo "PR ignored"
              exit 0
            fi

            if [ $result -eq 0 ]; then
              python scripts/status.py --mark-merged "$TASK_ID" "$PR"
              echo "PR merged"
              exit 0
            fi

            if [ $attempt -ge $max_attempts ]; then
              python scripts/status.py --mark-failed "$TASK_ID" "$PR"
              echo "Max attempts reached; task marked failed"
              exit 0
            fi

            attempt=$((attempt+1))
          done

name: Build staging_changes summaries

on:
  push:
    branches: [ "staging" ]
  pull_request:
    branches: [ "staging" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all branches
        run: |
          git fetch --all --prune

      - name: Set base/target refs
        id: refs
        run: |
          # Default branches
          echo "base=production" >> $GITHUB_OUTPUT
          echo "target=staging" >> $GITHUB_OUTPUT
          echo "base_ref=origin/production" >> $GITHUB_OUTPUT
          echo "target_ref=origin/staging" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

      - name: Generate staging_changes.txt
        run: |
          set -euo pipefail
          BASE_REF="${{ steps.refs.outputs.base_ref }}"
          TARGET_REF="${{ steps.refs.outputs.target_ref }}"

          {
            echo "# Staging Changes"
            echo "Generated: ${{ steps.refs.outputs.timestamp }}"
            echo "Range: ${BASE_REF}..${TARGET_REF}"
            echo
            echo "## Commits"
            git log --no-merges --date=short --pretty="* %h %ad %s (%an)" ${BASE_REF}..${TARGET_REF} || true
            echo
            echo "## Files Changed"
            git diff --name-status ${BASE_REF}..${TARGET_REF} || true
            echo
            echo "## Summary (counts)"
            echo "Commits: $(git rev-list --count ${BASE_REF}..${TARGET_REF})"
            echo "Files:   $(git diff --name-only ${BASE_REF}..${TARGET_REF} | wc -l | xargs)"
          } > staging_changes.txt

      - name: Generate staging_changes.json
        run: |
          set -euo pipefail
          BASE_REF="${{ steps.refs.outputs.base_ref }}"
          TARGET_REF="${{ steps.refs.outputs.target_ref }}"
          TS="${{ steps.refs.outputs.timestamp }}"

          python - <<'PY'
          import json, subprocess

          def sh(cmd):
            return subprocess.check_output(cmd, shell=True, text=True, stderr=subprocess.DEVNULL).strip()

          BASE_REF = sh('echo $BASE_REF')
          TARGET_REF = sh('echo $TARGET_REF')
          TS = sh('echo $TS')

          # Commits (no merges)
          commits_raw = sh(f'git log --no-merges --date=iso --pretty="%H|%ad|%an|%s" {BASE_REF}..{TARGET_REF}') if sh(f'git rev-list --count {BASE_REF}..{TARGET_REF}') != "0" else ""
          commits = []
          if commits_raw:
            for line in commits_raw.splitlines():
              h, ad, an, s = line.split("|", 3)
              commits.append({"hash": h[:7], "date": ad, "author": an, "subject": s})

          # Files changed
          files_raw = sh(f'git diff --name-status {BASE_REF}..{TARGET_REF}') if commits else ""
          files = []
          if files_raw:
            for line in files_raw.splitlines():
              parts = line.split("\t")
              status = parts[0]
              path = parts[-1]
              files.append({"status": status, "path": path})

          data = {
            "generated_at": TS,
            "range": f"{BASE_REF}..{TARGET_REF}",
            "summary": {
              "commit_count": len(commits),
              "file_count": len(files)
            },
            "commits": commits,
            "files_changed": files
          }

          with open("staging_changes.json", "w") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging_changes
          path: |
            staging_changes.txt
            staging_changes.json
          retention-days: 14

      - name: Comment preview on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const txt = fs.readFileSync('staging_changes.txt', 'utf8');
            const preview = txt.length > 6000 ? txt.slice(0, 6000) + '\n...\n(truncated)' : txt;
            const body = [
              "### Staging Changes (preview)",
              "",
              "```\n" + preview + "\n```",
              "",
              "_Full artifacts: staging_changes.txt / staging_changes.json_"
            ].join("\n");
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Push to staging-metadata branch
        if: always()
        run: |
          TS_SAFE=$(date -u +%Y%m%dT%H%M%SZ)
          BRANCH="staging-metadata"
          git switch --create "$BRANCH" || git switch "$BRANCH"
          mkdir -p history
          cp staging_changes.txt "history/staging_changes_${TS_SAFE}.txt"
          cp staging_changes.json "history/staging_changes_${TS_SAFE}.json"
          git add history/
          git -c user.name="ci-bot" -c user.email="ci@example.com" commit -m "chore: update staging_changes ${TS_SAFE}" || echo "No changes to commit"
          git push origin HEAD:"$BRANCH"


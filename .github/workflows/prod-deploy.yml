name: Deploy to Production 

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      APP_ENV: prod
      RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: zip, intl, mbstring, curl, bcmath, xml

      - name: Set .env file
        run: |
          cp .env.production .env
          envsubst '$RDS_ENDPOINT $DB_USER $DB_PASSWORD' < .env > .env.tmp
          mv .env.tmp .env

      - name: Install Dependencies
        env:
          SKIP_CACHE_CLEAR: "1"
        run: |
          composer install --no-dev --optimize-autoloader --no-scripts

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
            node-version: '20.17.0'
            cache: 'yarn'
  
      - name: Verify Node.js version
        run: |
            node -v
            node -e "const v=+process.versions.node.split('.')[0]; if(v<20){console.error('Need Node >=20, got', process.version); process.exit(1)} else {console.log('Using', process.version)}"
  
      - name: Install Node.js Dependencies
        run: yarn install
        # Temporary unblock (not recommended long-term):
        # run: yarn install --ignore-engines  

      - name: Build Frontend Assets
        run: yarn build

      - name: Deploy to Production Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          rsync -avz --delete --exclude 'node_modules' --exclude '.git' --exclude 'var' -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" . $EC2_USER@$EC2_HOST:/var/www/cleanwhiskers.com

      - name: Prepare Cache/Logs on Production Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \
          "cd /var/www/cleanwhiskers.com && \
           sudo rm -rf var/cache
           sudo rm -rf var/log
           sudo rm -rf public/assets
           sudo mkdir -p var/log public/assets && \
           sudo chown -R www-data:www-data var public/assets && \
           sudo chmod -R 775 var public/assets"

      - name: Install Importmap on Production Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \
          "cd /var/www/cleanwhiskers.com && php bin/console importmap:install --no-interaction --env=prod"

      - name: Compile Asset Map on Production Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \
          "cd /var/www/cleanwhiskers.com && php bin/console asset-map:compile --env=prod"

      - name: Run Migrations on Production Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \
          "cd /var/www/cleanwhiskers.com && php bin/console --no-interaction --allow-no-migration --env=prod doctrine:migrations:migrate"
name: Deploy to Staging 

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      APP_ENV: prod
      STAGING_RDS_ENDPOINT: ${{ secrets.STAGING_RDS_ENDPOINT }}
      STAGING_DB_USER: ${{ secrets.STAGING_DB_USER }}
      STAGING_DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      EC2_STAGING_HOST: ${{ secrets.EC2_STAGING_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      STAGING_BASIC_AUTH_USER: ${{ secrets.STAGING_BASIC_AUTH_USER }}
      STAGING_BASIC_AUTH_PASS: ${{ secrets.STAGING_BASIC_AUTH_PASS }}
      # Email + app configuration (configure as repo secrets)
      STAGING_MAILER_DSN: ${{ secrets.STAGING_MAILER_DSN }}
      STAGING_OUTREACH_CONTACT_EMAIL: ${{ secrets.STAGING_OUTREACH_CONTACT_EMAIL }}
      STAGING_APP_SECRET: ${{ secrets.STAGING_APP_SECRET }}
      STAGING_APP_BASE_URL: ${{ secrets.STAGING_APP_BASE_URL }}
      STAGING_LEADS_FEATURE_ENABLED: ${{ secrets.STAGING_LEADS_FEATURE_ENABLED }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: zip, intl, mbstring, curl, bcmath, xml

      - name: Set .env file
        run: |
          cp .env.staging .env
          envsubst '$STAGING_RDS_ENDPOINT $STAGING_DB_USER $STAGING_DB_PASSWORD $STAGING_BASIC_AUTH_USER $STAGING_BASIC_AUTH_PASS' < .env > .env.tmp
          mv .env.tmp .env
          # Inject staging secrets for mailer and app settings if provided
          if [ -n "${STAGING_MAILER_DSN}" ]; then echo "MAILER_DSN=${STAGING_MAILER_DSN}" >> .env; fi
          if [ -n "${STAGING_OUTREACH_CONTACT_EMAIL}" ]; then echo "OUTREACH_CONTACT_EMAIL=${STAGING_OUTREACH_CONTACT_EMAIL}" >> .env; fi
          if [ -n "${STAGING_APP_SECRET}" ]; then echo "APP_SECRET=${STAGING_APP_SECRET}" >> .env; fi
          if [ -n "${STAGING_APP_BASE_URL}" ]; then echo "APP_BASE_URL=${STAGING_APP_BASE_URL}" >> .env; fi
          if [ -n "${STAGING_LEADS_FEATURE_ENABLED}" ]; then echo "LEADS_FEATURE_ENABLED=${STAGING_LEADS_FEATURE_ENABLED}" >> .env; fi

      - name: Install Dependencies
        env:
          SKIP_CACHE_CLEAR: "1"
        run: |
          composer install --no-dev --optimize-autoloader --no-scripts

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'   # pin exact LTS to avoid surprises
          cache: 'yarn'
  
      - name: Verify Node.js version
        run: |
            node -v
            node -e "const v=+process.versions.node.split('.')[0]; if(v<20){console.error('Need Node >=20, got', process.version); process.exit(1)} else {console.log('Using', process.version)}"
  
      - name: Install Node.js Dependencies
        run: yarn install
          # If you need to unblock temporarily, swap to:
          # run: yarn install --ignore-engines

      - name: Build Frontend Assets
        run: yarn build

      - name: Deploy to Staging Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          rsync -avz --delete --exclude 'node_modules' --exclude '.git' --exclude 'var' -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" . $EC2_USER@$EC2_STAGING_HOST:/var/www/staging.cleanwhiskers.com

      - name: Prepare Cache/Logs on Staging Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_STAGING_HOST \
          "cd /var/www/staging.cleanwhiskers.com && \
           sudo rm -rf var/cache && \
           sudo rm -rf var/log && \
           sudo rm -rf public/assets && \
           sudo mkdir -p var/log public/assets && \
           sudo chown -R www-data:www-data var public/assets && \
           sudo chmod -R 775 var public/assets"

      # (Reverted) Removed Basic Auth provisioning on staging

      - name: Install Importmap on Staging Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_STAGING_HOST \
          "cd /var/www/staging.cleanwhiskers.com && php bin/console importmap:install --no-interaction --env=prod"

      - name: Compile Asset Map on Staging Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_STAGING_HOST \
          "cd /var/www/staging.cleanwhiskers.com && php bin/console asset-map:compile --env=prod"

      - name: Run Migrations on Staging Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_STAGING_HOST \
          "cd /var/www/staging.cleanwhiskers.com && php bin/console --no-interaction --allow-no-migration --env=prod doctrine:migrations:migrate"

      - name: Clear Symfony Cache on Staging Server
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_STAGING_HOST \
          "cd /var/www/staging.cleanwhiskers.com && php bin/console cache:clear --env=prod"

      - name: Install/Restart Messenger Worker (Staging)
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_STAGING_HOST 'set -euo pipefail; \
            cd /var/www/staging.cleanwhiskers.com; \
            php bin/console messenger:stop-workers --env=prod || true; \
            for i in $(seq 1 15); do \
              if ! pgrep -f messenger:consume >/dev/null; then \
                echo "All workers stopped"; \
                break; \
              fi; \
              sleep 1; \
            done; \
            sudo cp /var/www/staging.cleanwhiskers.com/deploy/messenger-worker-staging.service /etc/systemd/system/messenger-worker-staging.service; \
            sudo systemctl daemon-reload; \
            sudo systemctl enable messenger-worker-staging.service; \
            sudo systemctl restart messenger-worker-staging.service; \
            if ! sudo systemctl is-active --quiet messenger-worker-staging.service; then \
              sudo systemctl status --no-pager messenger-worker-staging.service; \
              exit 1; \
            fi; \
            sudo systemctl status --no-pager messenger-worker-staging.service'

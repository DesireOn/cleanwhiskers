name: Auto-merge PRs into staging

on:
  workflow_run:
    workflows: ["Run PHPUnit tests on PR"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Ensure GH_PAT secret is set
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          if [ -z "$GH_PAT" ]; then
            echo "GH_PAT secret is not configured" >&2
            exit 1
          fi
      - name: Merge the PR into staging
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const pr = context.payload.workflow_run.pull_requests[0];
            if (!pr) {
              core.setFailed('No pull request found for this workflow run.');
              return;
            }

            const { data: prData } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });

            if (prData.draft) {
              core.setFailed(`PR #${pr.number} is still a draft.`);
              return;
            }

            if (prData.mergeable === false) {
              core.setFailed(`PR #${pr.number} is not mergeable (conflicts).`);
              return;
            }

            const merge_method = 'merge';

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              merge_method,
              commit_title: `Auto-merge PR #${pr.number}: ${pr.title}`,
              commit_message: pr.body || 'Auto-merged by workflow.',
            });

            core.notice(`PR #${pr.number} merged into staging.`);

      - name: Delete branch after merge
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const pr = context.payload.workflow_run.pull_requests[0];
            // Only attempt deletion if the branch is in the same repository
            if (pr.head.repo.full_name === `${context.repo.owner}/${context.repo.repo}`) {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${pr.head.ref}`,
                });
                core.notice(`Branch ${pr.head.ref} deleted.`);
              } catch (error) {
                core.warning(`Could not delete branch ${pr.head.ref}: ${error.message}`);
              }
            } else {
              core.warning('Skipping branch deletion for external fork.');
            }
